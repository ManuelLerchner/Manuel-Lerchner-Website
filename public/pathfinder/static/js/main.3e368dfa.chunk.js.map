{"version":3,"sources":["Solver/Graph.js","NavBar/Selector.js","NavBar/NavBar.js","Game/Block.js","Game/Field.js","Solver/Dijkstra.js","Solver/AStar.js","PathVisualizer.js","App.js","index.js"],"names":["Node","type","index","this","neighbours","prev","visitedCount","dist","neighbour","push","Graph","boxes","dims","nodes","Array","from","box","i","find","node","addNeighbour","Math","floor","ceil","pathIndices","filter","sort","a","b","map","Selector","setselectedBrush","handleChange","e","target","id","className","htmlFor","name","value","onChange","NavBar","randomize","text","solve","clear","ErrorMsg","href","onClick","Block","handleClick","style","overlay","onMouseDown","onMouseUp","onMouseMove","Field","gridTemplateColumns","repeat","uuidv4","Dijkstra","startNode","endNode","graph","CONNECTION_WEIGHT","forEach","Infinity","remaining","minDist","min","apply","bestCandidate","findNeighbour","length","AStar","f","g","Start","hCost","open","closed","currentNode","item","successor","includes","new_g_val","edgeCost","x1","y1","x2","y2","sqrt","NodeA","NodeB","lenX","posA","indexToPos","posB","heuristic","BlockClass","PathVisualizer","getWindowDimensions","mousePressed","animating","calculating","interuptedAnimating","startIndex","endIndex","selectedBrush","setboxes","setGridDims","bind","animate","element","state","clone","setCSS","document","getElementById","currentState","classList","remove","add","clearInterval","pathInterval","visitedInterval","copy","setState","emptyBoxes","_","getRandomInt","algorithm","tStart","performance","now","findStartNode","findEndNode","Solver","path","traceBack","visited","getVisited","tEnd","timeTaken","round","el","iterations","animatePath","setInterval","dimensions","window","width","innerWidth","height","innerHeight","ratio","Component","max","random","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3e368dfa.chunk.js","sourcesContent":["class Node {\r\n    constructor(type, index) {\r\n        this.type = type;\r\n        this.index = index;\r\n        this.neighbours = [];\r\n        this.prev = null;\r\n        this.visitedCount = null;\r\n    }\r\n\r\n    setDist(dist) {\r\n        this.dist = dist;\r\n    }\r\n\r\n    addNeighbour(neighbour) {\r\n        this.neighbours.push(neighbour);\r\n    }\r\n}\r\n\r\nexport class Graph {\r\n    constructor(boxes, dims) {\r\n        this.boxes = boxes;\r\n        this.dims = dims;\r\n\r\n        this.nodes = Array.from(boxes, (box, i) => {\r\n            return new Node(box.type, i);\r\n        });\r\n    }\r\n\r\n    findStartNode() {\r\n        return this.nodes.find((node) => node.type === \"start\");\r\n    }\r\n\r\n    findEndNode() {\r\n        return this.nodes.find((node) => node.type === \"end\");\r\n    }\r\n\r\n    findNeighbour(node) {\r\n        const index = node.index;\r\n        if (index % this.dims[0] !== 0) {\r\n            this.addNeighbour(node, index - 1);\r\n        }\r\n        if ((index + 1) % this.dims[0] !== 0) {\r\n            this.addNeighbour(node, index + 1);\r\n        }\r\n        if (Math.floor(index / this.dims[0]) !== 0) {\r\n            this.addNeighbour(node, index - this.dims[0]);\r\n        }\r\n        if (Math.ceil((index + 1) / this.dims[0]) !== this.dims[1]) {\r\n            this.addNeighbour(node, index + this.dims[0]);\r\n        }\r\n    }\r\n\r\n    addNeighbour(node, index) {\r\n        const nodetype = this.boxes[index].type;\r\n        if (nodetype !== \"wall\") {\r\n            node.addNeighbour(this.nodes[index]);\r\n        }\r\n    }\r\n\r\n    traceBack(node) {\r\n        const pathIndices = [];\r\n\r\n        while (node) {\r\n            pathIndices.push(node.index);\r\n            node = node.prev;\r\n        }\r\n\r\n        return pathIndices;\r\n    }\r\n\r\n    getVisited(nodes) {\r\n        return nodes\r\n            .filter((node) => node.visitedCount)\r\n            .sort((a, b) => {\r\n                return a.visitedCount - b.visitedCount;\r\n            })\r\n            .map((node) => node.index);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Selector({ setselectedBrush }) {\r\n    function handleChange(e) {\r\n        setselectedBrush(e.target.id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className=\"drawSelector\">\r\n                <div>\r\n                    <label htmlFor=\"wall\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"wall\"\r\n                            id=\"wall\"\r\n                            value=\"wall\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                            dashboard\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"empty\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"empty\"\r\n                            id=\"empty\"\r\n                            value=\"empty\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                            check_box_outline_blank\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"start\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"start\"\r\n                            id=\"start\"\r\n                            value=\"start\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                            double_arrow\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"end\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"end\"\r\n                            id=\"end\"\r\n                            value=\"end\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40 green-text text-accent-1\">\r\n                            sports_score\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Selector from \"./Selector\";\r\n\r\nimport \"../css/navbar.css\";\r\n\r\nexport default function NavBar({\r\n    randomize,\r\n    text,\r\n    setselectedBrush,\r\n    solve,\r\n    clear\r\n}) {\r\n    const solveDijkstra = () => {\r\n        solve(\"Dijkstra\");\r\n    };\r\n    const solveAStar = () => {\r\n        solve(\"AStar\");\r\n    };\r\n\r\n    let ErrorMsg = \"\";\r\n    if (text !== \"\") {\r\n        ErrorMsg = (\r\n            <li>\r\n                <a\r\n                    className=\"waves-effect waves-light btn-large red darken-4 hide-on-small-only\"\r\n                    href=\"#!\"\r\n                >\r\n                    {text}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar-fixed\">\r\n            <nav>\r\n                <div className=\"nav-wrapper grey darken-4\">\r\n                    <ul className=\"left hide-on-med-and-down\">\r\n                        <Selector setselectedBrush={setselectedBrush} />\r\n                    </ul>\r\n\r\n                    <ul className=\"right\">\r\n                        {ErrorMsg}\r\n                        <li>\r\n                            <a\r\n                                className=\"waves-effect waves-light btn-large orange darken-4\"\r\n                                href=\"#!\"\r\n                                onClick={randomize}\r\n                            >\r\n                                <span className=\"hide-on-small-only left\">\r\n                                    Randomize\r\n                                </span>\r\n                                <i className=\"material-icons right hide-on-med-and-down\">\r\n                                    shuffle_on\r\n                                </i>\r\n                                <i className=\"material-icons hide-on-med-and-up\">\r\n                                    shuffle_on\r\n                                </i>\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a\r\n                                className=\"dropdown-trigger  waves-effect waves-light btn-large green darken-1\"\r\n                                href=\"#!\"\r\n                                data-target=\"dropdown1\"\r\n                            >\r\n                                <span className=\"hide-on-small-only left\">\r\n                                    Solve\r\n                                </span>\r\n\r\n                                <i className=\"material-icons right hide-on-med-and-down\">\r\n                                    emoji_objects\r\n                                </i>\r\n                                <i className=\"material-icons hide-on-med-and-up\">\r\n                                    emoji_objects\r\n                                </i>\r\n                            </a>\r\n\r\n                            <ul\r\n                                id=\"dropdown1\"\r\n                                className=\"dropdown-content blue-grey darken-2 \"\r\n                            >\r\n                                <li>\r\n                                    <a\r\n                                        href=\"#!\"\r\n                                        className=\"white-text\"\r\n                                        onClick={solveDijkstra}\r\n                                    >\r\n                                        <i className=\"material-icons\">pages</i>\r\n                                        Dijkstra\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a\r\n                                        href=\"#!\"\r\n                                        className=\"white-text\"\r\n                                        onClick={solveAStar}\r\n                                    >\r\n                                        <i className=\"material-icons\">star</i>\r\n                                        AStar\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <a\r\n                                className=\"waves-effect waves-light btn-large\"\r\n                                href=\"#!\"\r\n                                onClick={clear}\r\n                            >\r\n                                <span className=\"hide-on-small-only left\">\r\n                                    Reset\r\n                                </span>\r\n                                <i className=\"material-icons right hide-on-med-and-down\">\r\n                                    loop\r\n                                </i>\r\n\r\n                                <i className=\"material-icons hide-on-med-and-up\">\r\n                                    loop\r\n                                </i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Block({ box, handleClick }) {\r\n    const handleOnMouseDown = (e) => {\r\n        handleClick(e.target, \"down\", box.index);\r\n    };\r\n\r\n    const handleOnMouseUp = (e) => {\r\n        handleClick(e.target, \"up\", box.index);\r\n    };\r\n\r\n    const handleOnMouseDrag = (e) => {\r\n        handleClick(e.target, \"drag\", box.index);\r\n    };\r\n\r\n    const style = `grid-item ${box.type} ${\r\n        box.type === \"empty\" ? box.overlay : \"\"\r\n    }`;\r\n\r\n    const id = `node-${box.index}`;\r\n\r\n    return (\r\n        <div\r\n            id={id}\r\n            className={style}\r\n            onMouseDown={handleOnMouseDown}\r\n            onMouseUp={handleOnMouseUp}\r\n            onMouseMove={handleOnMouseDrag}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Block from \"./Block\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport default function Field({ dims, boxes, handleClick }) {\r\n    const style = {\r\n        gridTemplateColumns: `${\"1fr \".repeat(dims[0])}`\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col l10 offset-l1 s12\">\r\n                <div className=\"grid-container\" style={style}>\r\n                    {boxes.map((box) => {\r\n                        return (\r\n                            <Block\r\n                                key={uuidv4()}\r\n                                box={box}\r\n                                handleClick={handleClick}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export default class Dijkstra {\r\n    constructor(startNode, endNode, graph) {\r\n        this.startNode = startNode;\r\n        this.endNode = endNode;\r\n        this.Graph = graph;\r\n\r\n        this.CONNECTION_WEIGHT = 1;\r\n\r\n        this.nodes = [...this.Graph.nodes];\r\n\r\n        this.nodes.forEach((node) => {\r\n            node.dist = Infinity;\r\n        });\r\n\r\n        this.nodes[startNode.index].dist = 0;\r\n    }\r\n\r\n    solve() {\r\n        let remaining = [...this.Graph.nodes];\r\n        let visitedCount = 0;\r\n\r\n        while (remaining.length > 0) {\r\n            const minDist = Math.min.apply(Math, [\r\n                ...remaining.map((node) => node.dist)\r\n            ]);\r\n\r\n            if (minDist === Infinity) {\r\n                return null;\r\n            }\r\n            const bestCandidate = remaining.find(\r\n                (node) => node.dist === minDist\r\n            );\r\n\r\n            if (bestCandidate) {\r\n                if (bestCandidate === this.endNode) {\r\n                    return bestCandidate;\r\n                }\r\n\r\n                remaining = remaining.filter((node) => node !== bestCandidate);\r\n                bestCandidate.visitedCount = visitedCount;\r\n                visitedCount++;\r\n\r\n                this.Graph.findNeighbour(bestCandidate);\r\n\r\n                bestCandidate.neighbours.forEach((neighbour) => {\r\n                    const newDist = bestCandidate.dist + this.CONNECTION_WEIGHT;\r\n\r\n                    if (newDist < neighbour.dist) {\r\n                        neighbour.dist =\r\n                            bestCandidate.dist + this.CONNECTION_WEIGHT;\r\n                        neighbour.prev = bestCandidate;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","export default class AStar {\r\n    constructor(startNode, endNode, graph) {\r\n        this.startNode = startNode;\r\n        this.endNode = endNode;\r\n        this.Graph = graph;\r\n\r\n        this.nodes = [...this.Graph.nodes];\r\n\r\n        this.nodes.forEach((node) => {\r\n            node.f = Infinity;\r\n            node.g = Infinity;\r\n        });\r\n\r\n        const Start = this.nodes[startNode.index];\r\n        Start.g = 0;\r\n        Start.f = this.hCost(Start);\r\n\r\n        this.open = [Start];\r\n        this.closed = [];\r\n    }\r\n\r\n    solve() {\r\n        let visitedCount = 0;\r\n        while (this.open.length > 0) {\r\n            const minDist = Math.min.apply(\r\n                Math,\r\n                this.open.map((node) => node.f)\r\n            );\r\n            const currentNode = this.open.find((node) => node.f === minDist);\r\n\r\n            if (currentNode === this.endNode) {\r\n                this.nodes = this.closed;\r\n                return currentNode;\r\n            }\r\n\r\n            currentNode.visitedCount = visitedCount;\r\n            visitedCount++;\r\n\r\n            this.open = this.open.filter((item) => item !== currentNode);\r\n            this.closed.push(currentNode);\r\n\r\n            this.Graph.findNeighbour(currentNode);\r\n\r\n            currentNode.neighbours.forEach((successor) => {\r\n                if (!this.closed.includes(successor)) {\r\n                    const new_g_val =\r\n                        currentNode.g + this.edgeCost(currentNode, successor);\r\n\r\n                    if (\r\n                        new_g_val < successor.g ||\r\n                        !this.open.includes(successor)\r\n                    ) {\r\n                        successor.g = new_g_val;\r\n                        successor.f = successor.g + this.hCost(successor);\r\n                        successor.prev = currentNode;\r\n\r\n                        if (!this.open.includes(successor)) {\r\n                            this.open.push(successor);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        this.nodes = this.closed;\r\n    }\r\n\r\n    heuristic([x1, y1], [x2, y2]) {\r\n        return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\r\n    }\r\n\r\n    hCost(Node) {\r\n        return this.edgeCost(Node, this.endNode);\r\n    }\r\n\r\n    edgeCost(NodeA, NodeB) {\r\n        const lenX = this.Graph.dims[0];\r\n\r\n        const posA = this.indexToPos(NodeA.index, lenX);\r\n        const posB = this.indexToPos(NodeB.index, lenX);\r\n\r\n        return this.heuristic(posA, posB);\r\n    }\r\n\r\n    indexToPos(i, lenX) {\r\n        const x = i % lenX;\r\n        const y = Math.floor(i / lenX);\r\n        return [x, y];\r\n    }\r\n}\r\n","import { Graph } from \"./Solver/Graph\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport NavBar from \"./NavBar/NavBar\";\r\nimport Field from \"./Game/Field\";\r\n\r\nimport Dijkstra from \"./Solver/Dijkstra\";\r\nimport AStar from \"./Solver/AStar\";\r\n\r\nclass BlockClass {\r\n    constructor(index) {\r\n        this.index = index;\r\n        this.type = \"empty\";\r\n        this.overlay = \"\";\r\n    }\r\n}\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nexport class PathVisualizer extends Component {\r\n    constructor({ getWindowDimensions }) {\r\n        super();\r\n\r\n        this.mousePressed = false;\r\n        this.animating = false;\r\n        this.calculating = false;\r\n        this.interuptedAnimating = false;\r\n\r\n        this.text = \"\";\r\n\r\n        this.startIndex = null;\r\n        this.endIndex = null;\r\n\r\n        this.dims = [50, 25];\r\n\r\n        this.boxes = [];\r\n        this.selectedBrush = \"\";\r\n\r\n        this.setboxes = (a) => {\r\n            this.boxes = a;\r\n        };\r\n\r\n        this.setselectedBrush = (a) => {\r\n            this.selectedBrush = a;\r\n        };\r\n\r\n        this.setGridDims();\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.clear = this.clear.bind(this);\r\n        this.randomize = this.randomize.bind(this);\r\n        this.solve = this.solve.bind(this);\r\n        this.animate = this.animate.bind(this);\r\n        this.setGridDims = this.setGridDims.bind(this);\r\n\r\n        this.randomize();\r\n    }\r\n\r\n    //Draw\r\n    handleClick(element, state, index) {\r\n        if (state === \"down\") {\r\n            this.mousePressed = true;\r\n            this.clone = [...this.boxes];\r\n            if (this.selectedBrush) this.setCSS(element, this.selectedBrush);\r\n\r\n            if (this.selectedBrush === \"start\") {\r\n                if (this.startIndex !== index) {\r\n                    this.setCSS(\r\n                        document.getElementById(`node-${this.startIndex}`),\r\n                        \"empty\"\r\n                    );\r\n                    this.startIndex = index;\r\n                }\r\n            }\r\n\r\n            if (this.selectedBrush === \"end\") {\r\n                if (this.endIndex !== index) {\r\n                    this.setCSS(\r\n                        document.getElementById(`node-${this.endIndex}`),\r\n                        \"empty\"\r\n                    );\r\n                    this.endIndex = index;\r\n                }\r\n            }\r\n        } else if (state === \"up\") {\r\n            this.mousePressed = false;\r\n\r\n            if (!this.clone) return;\r\n\r\n            try {\r\n                if (this.selectedBrush === \"start\")\r\n                    this.clone.find((box) => box.type === \"start\").type =\r\n                        \"empty\";\r\n\r\n                if (this.selectedBrush === \"end\")\r\n                    this.clone.find((box) => box.type === \"end\").type = \"empty\";\r\n            } catch {}\r\n\r\n            if (this.selectedBrush) this.clone[index].type = this.selectedBrush;\r\n\r\n            this.setboxes(this.clone);\r\n        } else if (state === \"drag\") {\r\n            if (this.selectedBrush && this.mousePressed) {\r\n                if (\r\n                    this.selectedBrush === \"wall\" ||\r\n                    this.selectedBrush === \"empty\"\r\n                ) {\r\n                    this.clone[index].type = this.selectedBrush;\r\n                    this.setCSS(element, this.selectedBrush);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Preset Css\r\n    setCSS(element, value) {\r\n        const currentState = element.classList[element.classList.length - 1];\r\n        element.classList.remove(currentState);\r\n        element.classList.add(value);\r\n    }\r\n\r\n    clear() {\r\n        if (this.animating) {\r\n            clearInterval(this.pathInterval);\r\n\r\n            clearInterval(this.visitedInterval);\r\n\r\n            this.animating = false;\r\n        }\r\n        const copy = [...this.boxes];\r\n\r\n        copy.forEach((box) => {\r\n            box.overlay = \"\";\r\n        });\r\n        this.setboxes(copy);\r\n        this.text = \"\";\r\n        this.setState({ state: this.state });\r\n    }\r\n\r\n    //Randomize\r\n    randomize() {\r\n        if (this.animating === false) {\r\n            const emptyBoxes = Array.from(\r\n                { length: this.dims[0] * this.dims[1] },\r\n                (_, i) => {\r\n                    return new BlockClass(i);\r\n                }\r\n            );\r\n\r\n            for (let i = 0; i < Math.floor(emptyBoxes.length * 0.25); i++) {\r\n                emptyBoxes[getRandomInt(0, emptyBoxes.length)].type = \"wall\";\r\n            }\r\n\r\n            this.startIndex =\r\n                getRandomInt(1, 4) * this.dims[0] +\r\n                getRandomInt(0, Math.ceil(this.dims[0] / 2));\r\n\r\n            this.endIndex =\r\n                emptyBoxes.length -\r\n                getRandomInt(1, 4) * this.dims[0] -\r\n                getRandomInt(0, Math.ceil(this.dims[0] / 2));\r\n\r\n            emptyBoxes[this.startIndex].type = \"start\";\r\n            emptyBoxes[this.endIndex].type = \"end\";\r\n\r\n            this.setboxes(emptyBoxes);\r\n            this.setState({ state: this.state });\r\n        }\r\n    }\r\n\r\n    //Solve for Path\r\n    solve(algorithm) {\r\n        if (this.animating === true) {\r\n            this.clear();\r\n        }\r\n\r\n        if (this.calculating === false) {\r\n            this.calculating = true;\r\n\r\n            var tStart = performance.now();\r\n\r\n            const graph = new Graph(this.boxes, this.dims);\r\n\r\n            const startNode = graph.findStartNode();\r\n            const endNode = graph.findEndNode();\r\n\r\n            if (!endNode || !startNode) {\r\n                this.text = !endNode ? \"No End Node!\" : \"No Start Node!\";\r\n                this.calculating = false;\r\n                this.setState({ state: this.state });\r\n                return;\r\n            }\r\n\r\n            let Solver =\r\n                algorithm === \"AStar\"\r\n                    ? new AStar(startNode, endNode, graph)\r\n                    : new Dijkstra(startNode, endNode, graph);\r\n\r\n            const target = Solver.solve();\r\n\r\n            const path = graph.traceBack(target);\r\n            const visited = graph.getVisited(Solver.nodes);\r\n\r\n            var tEnd = performance.now();\r\n\r\n            this.calculating = false;\r\n\r\n            const timeTaken = tEnd - tStart;\r\n\r\n            this.text = (\r\n                <>\r\n                    <span className=\"hide-on-small-only left\">\r\n                        {Math.round(timeTaken * 100) / 100} ms\r\n                    </span>\r\n\r\n                    <i className=\"material-icons right hide-on-med-and-down\">\r\n                        timer\r\n                    </i>\r\n                    <i className=\"material-icons hide-on-med-and-up\">timer</i>\r\n                </>\r\n            );\r\n            this.setState({ state: this.state });\r\n\r\n            this.animating = true;\r\n            this.animate(visited, path);\r\n        }\r\n    }\r\n\r\n    animate(visited, path) {\r\n        if (visited.length !== 0) {\r\n            this.visitedInterval = setInterval(animate.bind(this), 15);\r\n\r\n            var iterations = 0;\r\n            function animate() {\r\n                const el = document.getElementById(\r\n                    `node-${visited[iterations]}`\r\n                );\r\n                this.setCSS(el, \"visited\");\r\n\r\n                if (iterations === visited.length - 1) {\r\n                    this.animatePath(path);\r\n                }\r\n\r\n                if (iterations === visited.length - 1)\r\n                    clearInterval(this.visitedInterval);\r\n\r\n                iterations++;\r\n            }\r\n        }\r\n    }\r\n\r\n    animatePath(path) {\r\n        if (path.length !== 0) {\r\n            this.pathInterval = setInterval(animate.bind(this), 80);\r\n\r\n            var iterations = 1;\r\n            function animate() {\r\n                const el = document.getElementById(`node-${path[iterations]}`);\r\n                this.setCSS(el, \"path\");\r\n\r\n                if (iterations === path.length - 2) {\r\n                    this.animating = false;\r\n                    this.interuptedAnimating = false;\r\n                }\r\n\r\n                if (iterations === path.length - 2)\r\n                    clearInterval(this.pathInterval);\r\n\r\n                iterations++;\r\n            }\r\n        } else {\r\n            this.animating = false;\r\n            this.interuptedAnimating = false;\r\n            this.text = \"\";\r\n        }\r\n    }\r\n\r\n    setGridDims() {\r\n        const dimensions = getWindowDimensions();\r\n\r\n        const ratio = dimensions.width / dimensions.height;\r\n\r\n        this.dims = [\r\n            Math.round(dimensions.width / 40),\r\n            Math.round(dimensions.width / 42 / ratio)\r\n        ];\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <NavBar\r\n                    solve={this.solve}\r\n                    randomize={this.randomize}\r\n                    text={this.text}\r\n                    setselectedBrush={this.setselectedBrush}\r\n                    clear={this.clear}\r\n                />\r\n                <Field\r\n                    dims={this.dims}\r\n                    boxes={this.boxes}\r\n                    handleClick={this.handleClick}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n","import { PathVisualizer } from \"./PathVisualizer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <PathVisualizer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}