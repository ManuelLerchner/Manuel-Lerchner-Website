{"version":3,"sources":["Solver/Graph.js","NavBar/Selector.js","NavBar/NavBar.js","Game/Block.js","Game/Field.js","Solver/Dijkstra.js","Solver/AStar.js","PathVisualizer.js","App.js","index.js"],"names":["Node","index","this","prev","neighbours","visitedCount","dist","neighbour","push","Graph","boxes","dims","nodes","Array","from","_","i","findNeighbour","forEach","node","addNeighbour","Math","floor","ceil","type","pathIndices","filter","sort","a","b","map","Selector","setselectedBrush","handleChange","e","target","id","className","htmlFor","name","value","onChange","NavBar","randomize","text","solve","clear","ErrorMsg","href","onClick","Block","box","handleClick","style","overlay","onMouseDown","onMouseUp","onMouseMove","Field","gridTemplateColumns","repeat","uuidv4","Dijkstra","startIndex","endIndex","graph","CONNECTION_WEIGHT","Infinity","remaining","minDist","min","apply","bestCandidate","find","length","AStar","f","g","startNode","hCost","open","closed","currentNode","item","successor","includes","new_g_val","edgeCost","x1","y1","x2","y2","sqrt","NodeA","NodeB","lenX","posA","indexToPos","posB","heuristic","BlockClass","PathVisualizer","mousePressed","animating","calculating","interuptedAnimating","pathTimeouts","visitedTimeouts","bind","animate","selectedBrush","setboxes","element","state","clone","setCSS","document","getElementById","currentState","classList","remove","add","timeout","clearTimeout","copy","setState","emptyBoxes","getRandomInt","algorithm","endNode","Solver","path","traceBack","slice","visited","getVisited","setTimeout","el","animatePath","Component","max","random","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.43b6c47e.chunk.js","sourcesContent":["class Node {\r\n    constructor(index) {\r\n        this.prev = null;\r\n        this.index = index;\r\n        this.neighbours = [];\r\n        this.visitedCount = null;\r\n    }\r\n\r\n    setDist(dist) {\r\n        this.dist = dist;\r\n    }\r\n\r\n    addNeighbour(neighbour) {\r\n        this.neighbours.push(neighbour);\r\n    }\r\n}\r\n\r\nexport class Graph {\r\n    constructor(boxes, dims) {\r\n        this.boxes = boxes;\r\n        this.dims = dims;\r\n\r\n        this.nodes = Array.from(boxes, (_, i) => {\r\n            return new Node(i);\r\n        });\r\n\r\n        this.findNeighbour(dims);\r\n    }\r\n\r\n    findNeighbour(dims) {\r\n        this.nodes.forEach((node) => {\r\n            const index = node.index;\r\n            if (index % dims[0] !== 0) {\r\n                this.addNeighbour(node, index - 1);\r\n            }\r\n            if ((index + 1) % dims[0] !== 0) {\r\n                this.addNeighbour(node, index + 1);\r\n            }\r\n            if (Math.floor(index / dims[0]) !== 0) {\r\n                this.addNeighbour(node, index - dims[0]);\r\n            }\r\n            if (Math.ceil((index + 1) / dims[0]) !== dims[1]) {\r\n                this.addNeighbour(node, index + dims[0]);\r\n            }\r\n        });\r\n    }\r\n\r\n    addNeighbour(node, index) {\r\n        const nodetype = this.boxes[index].type;\r\n        if (nodetype !== \"wall\") {\r\n            node.addNeighbour(this.nodes[index]);\r\n        }\r\n    }\r\n\r\n    traceBack(node) {\r\n        const pathIndices = [];\r\n\r\n        while (node) {\r\n            pathIndices.push(node.index);\r\n            node = node.prev;\r\n        }\r\n\r\n        return pathIndices;\r\n    }\r\n\r\n    getVisited(nodes) {\r\n        return nodes\r\n            .filter((node) => node.visitedCount)\r\n            .sort((a, b) => {\r\n                return a.visitedCount - b.visitedCount;\r\n            })\r\n            .map((node) => node.index);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Selector({ setselectedBrush }) {\r\n    function handleChange(e) {\r\n        setselectedBrush(e.target.id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className=\"drawSelector\">\r\n                <div>\r\n                    <label htmlFor=\"wall\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"wall\"\r\n                            id=\"wall\"\r\n                            value=\"wall\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                            dashboard\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"empty\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"empty\"\r\n                            id=\"empty\"\r\n                            value=\"empty\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                            check_box_outline_blank\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"start\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"start\"\r\n                            id=\"start\"\r\n                            value=\"start\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                            double_arrow\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"end\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"end\"\r\n                            id=\"end\"\r\n                            value=\"end\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40 green-text text-accent-1\">\r\n                            sports_score\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Selector from \"./Selector\";\r\n\r\nimport \"../css/navbar.css\";\r\n\r\nexport default function NavBar({\r\n    randomize,\r\n    text,\r\n    setselectedBrush,\r\n    solve,\r\n    clear\r\n}) {\r\n    const solveDijkstra = () => {\r\n        solve(\"Dijkstra\");\r\n    };\r\n    const solveAStar = () => {\r\n        solve(\"AStar\");\r\n    };\r\n\r\n    let ErrorMsg = \"\";\r\n    if (text !== \"\") {\r\n        ErrorMsg = (\r\n            <li>\r\n                <a\r\n                    className=\"waves-effect waves-light btn-large red darken-4\"\r\n                    href=\"#!\"\r\n                >\r\n                    {text}\r\n                </a>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar-fixed\">\r\n            <nav>\r\n                <div className=\"nav-wrapper grey darken-4\">\r\n                    <ul className=\"left hide-on-med-and-down\">\r\n                        <Selector setselectedBrush={setselectedBrush} />\r\n                    </ul>\r\n\r\n                    <ul className=\"right\">\r\n                        {ErrorMsg}\r\n                        <li>\r\n                            <a\r\n                                className=\"waves-effect waves-light btn-large orange darken-4\"\r\n                                href=\"#!\"\r\n                                onClick={randomize}\r\n                            >\r\n                                <span className=\"hide-on-small-only left\">\r\n                                    Randomize\r\n                                </span>\r\n                                <i className=\"material-icons right hide-on-med-and-down\">\r\n                                    shuffle_on\r\n                                </i>\r\n                                <i className=\"material-icons hide-on-med-and-up\">\r\n                                    shuffle_on\r\n                                </i>\r\n                            </a>\r\n                        </li>\r\n                        <li>\r\n                            <a\r\n                                className=\"dropdown-trigger  waves-effect waves-light btn-large green darken-1\"\r\n                                href=\"#!\"\r\n                                data-target=\"dropdown1\"\r\n                            >\r\n                                Solve\r\n                                <i className=\"material-icons right\">\r\n                                    emoji_objects\r\n                                </i>\r\n                            </a>\r\n\r\n                            <ul\r\n                                id=\"dropdown1\"\r\n                                className=\"dropdown-content blue-grey darken-4 \"\r\n                            >\r\n                                <li>\r\n                                    <a\r\n                                        href=\"#!\"\r\n                                        className=\"white-text\"\r\n                                        onClick={solveDijkstra}\r\n                                    >\r\n                                        <i className=\"material-icons\">\r\n                                            view_module\r\n                                        </i>\r\n                                        Dijkstra\r\n                                    </a>\r\n                                </li>\r\n                                <li>\r\n                                    <a\r\n                                        href=\"#!\"\r\n                                        className=\"white-text\"\r\n                                        onClick={solveAStar}\r\n                                    >\r\n                                        <i className=\"material-icons\">\r\n                                            view_module\r\n                                        </i>\r\n                                        AStar\r\n                                    </a>\r\n                                </li>\r\n                            </ul>\r\n                        </li>\r\n\r\n                        <li>\r\n                            <a\r\n                                className=\"waves-effect waves-light btn-large\"\r\n                                href=\"#!\"\r\n                                onClick={clear}\r\n                            >\r\n                                Reset\r\n                                <i className=\"material-icons right\">\r\n                                    loop\r\n                                </i>{\" \"}\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Block({ box, handleClick }) {\r\n    const handleOnMouseDown = (e) => {\r\n        handleClick(e.target, \"down\", box.index);\r\n    };\r\n\r\n    const handleOnMouseUp = (e) => {\r\n        handleClick(e.target, \"up\", box.index);\r\n    };\r\n\r\n    const handleOnMouseDrag = (e) => {\r\n        handleClick(e.target, \"drag\", box.index);\r\n    };\r\n\r\n    const style = `grid-item ${box.type} ${\r\n        box.type === \"empty\" ? box.overlay : \"\"\r\n    }`;\r\n\r\n    const id = `node-${box.index}`;\r\n\r\n    return (\r\n        <div\r\n            id={id}\r\n            className={style}\r\n            onMouseDown={handleOnMouseDown}\r\n            onMouseUp={handleOnMouseUp}\r\n            onMouseMove={handleOnMouseDrag}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Block from \"./Block\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport default function Field({ dims, boxes, handleClick }) {\r\n    const style = {\r\n        gridTemplateColumns: `${\"1fr \".repeat(dims[0])}`\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col l10 offset-l1 s12\">\r\n                <div className=\"grid-container\" style={style}>\r\n                    {boxes.map((box) => {\r\n                        return (\r\n                            <Block\r\n                                key={uuidv4()}\r\n                                box={box}\r\n                                handleClick={handleClick}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export default class Dijkstra {\r\n    constructor(startIndex, endIndex, graph) {\r\n        this.startIndex = startIndex;\r\n        this.endIndex = endIndex;\r\n        this.Graph = graph;\r\n\r\n        this.CONNECTION_WEIGHT = 10;\r\n\r\n        this.nodes = [...this.Graph.nodes];\r\n\r\n        this.nodes.forEach((node) => {\r\n            node.dist = Infinity;\r\n        });\r\n\r\n        this.Graph.nodes[this.startIndex].dist = 0;\r\n    }\r\n\r\n    solve() {\r\n        let remaining = [...this.Graph.nodes];\r\n        let visitedCount = 0;\r\n\r\n        while (remaining.length > 0) {\r\n            const minDist = Math.min.apply(Math, [\r\n                ...remaining.map((node) => node.dist)\r\n            ]);\r\n\r\n            if (minDist === Infinity) {\r\n                return null;\r\n            }\r\n            const bestCandidate = remaining.find(\r\n                (node) => node.dist === minDist\r\n            );\r\n\r\n            if (bestCandidate) {\r\n                if (bestCandidate.index === this.endIndex) {\r\n                    return bestCandidate;\r\n                }\r\n\r\n                remaining = remaining.filter((node) => node !== bestCandidate);\r\n                bestCandidate.visitedCount = visitedCount;\r\n                visitedCount++;\r\n\r\n                bestCandidate.neighbours.forEach((neighbour) => {\r\n                    const newDist = bestCandidate.dist + this.CONNECTION_WEIGHT;\r\n\r\n                    if (newDist < neighbour.dist) {\r\n                        neighbour.dist =\r\n                            bestCandidate.dist + this.CONNECTION_WEIGHT;\r\n                        neighbour.prev = bestCandidate;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","export default class AStar {\r\n    constructor(startIndex, endIndex, graph) {\r\n        this.startIndex = startIndex;\r\n        this.endIndex = endIndex;\r\n        this.Graph = graph;\r\n\r\n        this.nodes = [...this.Graph.nodes];\r\n\r\n        this.nodes.forEach((node) => {\r\n            node.f = Infinity;\r\n            node.g = Infinity;\r\n        });\r\n\r\n        const startNode = this.nodes[startIndex];\r\n        startNode.g = 0;\r\n        startNode.f = this.hCost(startNode);\r\n\r\n        this.open = [startNode];\r\n        this.closed = [];\r\n    }\r\n\r\n    solve() {\r\n        let visitedCount = 0;\r\n        while (this.open.length > 0) {\r\n            const minDist = Math.min.apply(\r\n                Math,\r\n                this.open.map((node) => node.f)\r\n            );\r\n            const currentNode = this.open.find((node) => node.f === minDist);\r\n\r\n            if (currentNode.index === this.endIndex) {\r\n                return currentNode;\r\n            }\r\n\r\n            currentNode.visitedCount = visitedCount;\r\n            visitedCount++;\r\n\r\n            this.open = this.open.filter((item) => item !== currentNode);\r\n            this.closed.push(currentNode);\r\n\r\n            currentNode.neighbours.forEach((successor) => {\r\n                if (!this.closed.includes(successor)) {\r\n                    const new_g_val =\r\n                        currentNode.g + this.edgeCost(currentNode, successor);\r\n\r\n                    if (\r\n                        new_g_val < successor.g ||\r\n                        !this.open.includes(successor)\r\n                    ) {\r\n                        successor.g = new_g_val;\r\n                        successor.f = successor.g + this.hCost(successor);\r\n                        successor.prev = currentNode;\r\n\r\n                        if (!this.open.includes(successor)) {\r\n                            this.open.push(successor);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        this.nodes = this.open;\r\n    }\r\n\r\n    heuristic([x1, y1], [x2, y2]) {\r\n        return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\r\n    }\r\n\r\n    hCost(Node) {\r\n        return this.edgeCost(Node, this.nodes[this.endIndex]);\r\n    }\r\n\r\n    edgeCost(NodeA, NodeB) {\r\n        const lenX = this.Graph.dims[0];\r\n\r\n        const posA = this.indexToPos(NodeA.index, lenX);\r\n        const posB = this.indexToPos(NodeB.index, lenX);\r\n\r\n        return this.heuristic(posA, posB);\r\n    }\r\n\r\n    indexToPos(i, lenX) {\r\n        const x = i % lenX;\r\n        const y = Math.floor(i / lenX);\r\n        return [x, y];\r\n    }\r\n}\r\n","import { Graph } from \"./Solver/Graph\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport NavBar from \"./NavBar/NavBar\";\r\nimport Field from \"./Game/Field\";\r\n\r\nimport Dijkstra from \"./Solver/Dijkstra\";\r\nimport AStar from \"./Solver/AStar\";\r\n\r\nclass BlockClass {\r\n    constructor(index) {\r\n        this.index = index;\r\n        this.type = \"empty\";\r\n        this.overlay = \"\";\r\n    }\r\n}\r\n\r\nexport class PathVisualizer extends Component {\r\n    constructor({ dims }) {\r\n        super();\r\n\r\n        this.mousePressed = false;\r\n        this.animating = false;\r\n        this.calculating = false;\r\n        this.interuptedAnimating = false;\r\n\r\n        this.text = \"\";\r\n\r\n        this.startIndex = null;\r\n        this.endIndex = null;\r\n\r\n        this.pathTimeouts = [];\r\n        this.visitedTimeouts = [];\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.clear = this.clear.bind(this);\r\n        this.randomize = this.randomize.bind(this);\r\n        this.solve = this.solve.bind(this);\r\n        this.animate = this.animate.bind(this);\r\n\r\n        this.dims = dims;\r\n        this.boxes = [];\r\n        this.selectedBrush = \"\";\r\n\r\n        this.setboxes = (a) => {\r\n            this.boxes = a;\r\n        };\r\n\r\n        this.setselectedBrush = (a) => {\r\n            this.selectedBrush = a;\r\n        };\r\n\r\n        this.randomize();\r\n    }\r\n\r\n    //Draw\r\n    handleClick(element, state, index) {\r\n        if (state === \"down\") {\r\n            this.mousePressed = true;\r\n            this.clone = [...this.boxes];\r\n            if (this.selectedBrush) this.setCSS(element, this.selectedBrush);\r\n\r\n            if (this.selectedBrush === \"start\") {\r\n                if (this.startIndex !== index) {\r\n                    this.setCSS(\r\n                        document.getElementById(`node-${this.startIndex}`),\r\n                        \"empty\"\r\n                    );\r\n                    this.startIndex = index;\r\n                }\r\n            }\r\n\r\n            if (this.selectedBrush === \"end\") {\r\n                if (this.endIndex !== index) {\r\n                    this.setCSS(\r\n                        document.getElementById(`node-${this.endIndex}`),\r\n                        \"empty\"\r\n                    );\r\n                    this.endIndex = index;\r\n                }\r\n            }\r\n        } else if (state === \"up\") {\r\n            this.mousePressed = false;\r\n\r\n            if (!this.clone) return;\r\n\r\n            try {\r\n                if (this.selectedBrush === \"start\")\r\n                    this.clone.find((box) => box.type === \"start\").type =\r\n                        \"empty\";\r\n\r\n                if (this.selectedBrush === \"end\")\r\n                    this.clone.find((box) => box.type === \"end\").type = \"empty\";\r\n            } catch {}\r\n\r\n            if (this.selectedBrush) this.clone[index].type = this.selectedBrush;\r\n\r\n            this.setboxes(this.clone);\r\n        } else if (state === \"drag\") {\r\n            if (this.selectedBrush && this.mousePressed) {\r\n                if (\r\n                    this.selectedBrush === \"wall\" ||\r\n                    this.selectedBrush === \"empty\"\r\n                ) {\r\n                    this.clone[index].type = this.selectedBrush;\r\n                    this.setCSS(element, this.selectedBrush);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Preset Css\r\n    setCSS(element, value) {\r\n        const currentState = element.classList[element.classList.length - 1];\r\n        element.classList.remove(currentState);\r\n        element.classList.add(value);\r\n    }\r\n\r\n    clear() {\r\n        if (this.animating) {\r\n            this.pathTimeouts.forEach((timeout) => {\r\n                clearTimeout(timeout);\r\n            });\r\n\r\n            this.visitedTimeouts.forEach((timeout) => {\r\n                clearTimeout(timeout);\r\n            });\r\n\r\n            this.animating = false;\r\n        }\r\n        const copy = [...this.boxes];\r\n\r\n        copy.forEach((box) => {\r\n            box.overlay = \"\";\r\n        });\r\n        this.setboxes(copy);\r\n        this.text = \"\";\r\n        this.setState({ state: this.state });\r\n    }\r\n\r\n    //Randomize\r\n    randomize() {\r\n        if (this.animating === false) {\r\n            const emptyBoxes = Array.from(\r\n                { length: this.dims[0] * this.dims[1] },\r\n                (_, i) => {\r\n                    return new BlockClass(i);\r\n                }\r\n            );\r\n\r\n            for (let i = 0; i < Math.floor(emptyBoxes.length * 0.25); i++) {\r\n                emptyBoxes[getRandomInt(0, emptyBoxes.length)].type = \"wall\";\r\n            }\r\n\r\n            this.startIndex = getRandomInt(0, 4 * this.dims[0]);\r\n            this.endIndex = getRandomInt(\r\n                emptyBoxes.length - 4 * this.dims[0],\r\n                emptyBoxes.length\r\n            );\r\n\r\n            emptyBoxes[this.startIndex].type = \"start\";\r\n            emptyBoxes[this.endIndex].type = \"end\";\r\n\r\n            this.setboxes(emptyBoxes);\r\n            this.setState({ state: this.state });\r\n        }\r\n    }\r\n\r\n    //Solve for Path\r\n    solve(algorithm) {\r\n        if (this.animating === true) {\r\n            this.clear();\r\n        }\r\n\r\n        if (this.calculating === false) {\r\n            this.calculating = true;\r\n\r\n            this.clear();\r\n            const graph = new Graph(this.boxes, this.dims);\r\n\r\n            const startNode = this.boxes.find((box) => box.type === \"start\");\r\n            const endNode = this.boxes.find((box) => box.type === \"end\");\r\n\r\n            if (!startNode) {\r\n                this.text = \"No Start Node!\";\r\n                this.calculating = false;\r\n                return;\r\n            }\r\n\r\n            if (!endNode) {\r\n                this.text = \"No End Node!\";\r\n                this.calculating = false;\r\n                return;\r\n            }\r\n\r\n            const startIndex = startNode.index;\r\n            const endIndex = endNode.index;\r\n\r\n            let Solver = null;\r\n\r\n            if (algorithm === \"AStar\") {\r\n                Solver = new AStar(startIndex, endIndex, graph);\r\n            }\r\n\r\n            if (algorithm === \"Dijkstra\") {\r\n                Solver = new Dijkstra(startIndex, endIndex, graph);\r\n            }\r\n\r\n            const target = Solver.solve();\r\n\r\n            const path = graph.traceBack(target).slice(1, -1);\r\n            const visited = graph.getVisited(Solver.nodes);\r\n\r\n            this.calculating = false;\r\n\r\n            this.animating = true;\r\n            this.animate(visited, path);\r\n        }\r\n    }\r\n\r\n    animate(visited, path) {\r\n        this.visitedTimeouts = [];\r\n        for (let i = 0; i < visited.length; i++) {\r\n            this.visitedTimeouts.push(\r\n                setTimeout(() => {\r\n                    if (!this.interuptedAnimating) {\r\n                        const el = document.getElementById(\r\n                            `node-${visited[i]}`\r\n                        );\r\n                        this.setCSS(el, \"visited\");\r\n\r\n                        if (i === visited.length - 1) {\r\n                            this.animatePath(path);\r\n                        }\r\n                    }\r\n                }, 10 * i)\r\n            );\r\n        }\r\n    }\r\n\r\n    animatePath(path) {\r\n        this.pathTimeouts = [];\r\n\r\n        if (path.length !== 0) {\r\n            for (let i = 0; i < path.length; i++) {\r\n                this.pathTimeouts.push(\r\n                    setTimeout(() => {\r\n                        if (!this.interuptedAnimating) {\r\n                            const el = document.getElementById(\r\n                                `node-${path[i]}`\r\n                            );\r\n                            this.setCSS(el, \"path\");\r\n\r\n                            if (i === path.length - 1) {\r\n                                this.animating = false;\r\n                                this.interuptedAnimating = false;\r\n                            }\r\n                        }\r\n                    }, 50 * i)\r\n                );\r\n            }\r\n        } else {\r\n            this.animating = false;\r\n            this.interuptedAnimating = false;\r\n            this.text = \"\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <NavBar\r\n                    solve={this.solve}\r\n                    randomize={this.randomize}\r\n                    text={this.text}\r\n                    setselectedBrush={this.setselectedBrush}\r\n                    clear={this.clear}\r\n                />\r\n                <Field\r\n                    dims={this.dims}\r\n                    boxes={this.boxes}\r\n                    handleClick={this.handleClick}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n","import { PathVisualizer } from \"./PathVisualizer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <PathVisualizer dims={[50, 25]} />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}