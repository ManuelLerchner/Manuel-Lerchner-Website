{"version":3,"sources":["Solver/Graph.js","NavBar/Selector.js","NavBar/NavBar.js","Game/Block.js","Game/Field.js","Solver/Dijkstra.js","Solver/AStar.js","Solver/BFS.js","Solver/DFS.js","NavBar/SelectorSmall.js","PathVisualizer.js","App.js","index.js"],"names":["Node","type","index","this","neighbours","prev","visitedCount","dist","neighbour","push","Graph","boxes","dims","nodes","Array","from","box","i","find","node","addNeighbour","Math","floor","ceil","pathIndices","filter","sort","a","b","map","Selector","setselectedBrush","handleChange","e","target","id","className","htmlFor","name","value","onChange","NavBar","randomize","text","solve","createGrid","clear","ErrorMsg","href","onClick","Block","handleClick","style","overlay","onMouseDown","onMouseUp","onMouseMove","Field","gridTemplateColumns","repeat","uuidv4","Dijkstra","startNode","endNode","graph","CONNECTION_WEIGHT","forEach","Infinity","remaining","minDist","min","apply","bestCandidate","findNeighbour","length","AStar","f","g","Start","hCost","open","closed","currentNode","item","successor","includes","new_g_val","edgeCost","x1","y1","x2","y2","sqrt","NodeA","NodeB","lenX","posA","indexToPos","posB","heuristic","BFS","queue","shift","child","DFS","goal","stack","reverse","curr","pop","res","BlockClass","PathVisualizer","mousePressed","animating","calculating","startIndex","endIndex","selectedBrush","setboxes","setGridDims","bind","animate","animateWalls","element","state","clone","setCSS","document","getElementById","currentState","classList","remove","add","clearInterval","pathInterval","visitedInterval","wallInterval","copy","setState","wallProbability","setStartEnd","emptyBoxes","_","getRandomInt","algorithm","tStart","performance","now","findStartNode","findEndNode","Solver","path","traceBack","visited","getVisited","tEnd","timeTaken","round","el","iterations","animatePath","setInterval","walls","vectorToIndex","dimensions","window","width","innerWidth","height","innerHeight","getWindowDimensions","ratio","x","y","j","h","minX","maxX","minY","maxY","randomNumber","addHWall","addInnerWalls","addVWall","hole","addOuterWalls","createMaze","Component","max","random","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.eb957de2.chunk.js","sourcesContent":["class Node {\r\n    constructor(type, index) {\r\n        this.type = type;\r\n        this.index = index;\r\n        this.neighbours = [];\r\n        this.prev = null;\r\n        this.visitedCount = null;\r\n    }\r\n\r\n    setDist(dist) {\r\n        this.dist = dist;\r\n    }\r\n\r\n    addNeighbour(neighbour) {\r\n        this.neighbours.push(neighbour);\r\n    }\r\n}\r\n\r\nexport class Graph {\r\n    constructor(boxes, dims) {\r\n        this.boxes = boxes;\r\n        this.dims = dims;\r\n\r\n        this.nodes = Array.from(boxes, (box, i) => {\r\n            return new Node(box.type, i);\r\n        });\r\n    }\r\n\r\n    findStartNode() {\r\n        return this.nodes.find((node) => node.type === \"start\");\r\n    }\r\n\r\n    findEndNode() {\r\n        return this.nodes.find((node) => node.type === \"end\");\r\n    }\r\n\r\n    findNeighbour(node) {\r\n        const index = node.index;\r\n        if (index % this.dims[0] !== 0) {\r\n            this.addNeighbour(node, index - 1);\r\n        }\r\n        if ((index + 1) % this.dims[0] !== 0) {\r\n            this.addNeighbour(node, index + 1);\r\n        }\r\n        if (Math.floor(index / this.dims[0]) !== 0) {\r\n            this.addNeighbour(node, index - this.dims[0]);\r\n        }\r\n        if (Math.ceil((index + 1) / this.dims[0]) !== this.dims[1]) {\r\n            this.addNeighbour(node, index + this.dims[0]);\r\n        }\r\n    }\r\n\r\n    addNeighbour(node, index) {\r\n        const nodetype = this.boxes[index].type;\r\n        if (nodetype !== \"wall\") {\r\n            node.addNeighbour(this.nodes[index]);\r\n        }\r\n    }\r\n\r\n    traceBack(node) {\r\n        const pathIndices = [];\r\n\r\n        while (node) {\r\n            pathIndices.push(node.index);\r\n            node = node.prev;\r\n        }\r\n\r\n        return pathIndices;\r\n    }\r\n\r\n    getVisited(nodes) {\r\n        return nodes\r\n            .filter((node) => node.visitedCount)\r\n            .sort((a, b) => {\r\n                return a.visitedCount - b.visitedCount;\r\n            })\r\n            .map((node) => node.index);\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Selector({ setselectedBrush }) {\r\n    function handleChange(e) {\r\n        setselectedBrush(e.target.id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form className=\"drawSelector\">\r\n                <div>\r\n                    <label htmlFor=\"wall\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"wall\"\r\n                            id=\"wall\"\r\n                            value=\"wall\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                            dashboard\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"empty\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"empty\"\r\n                            id=\"empty\"\r\n                            value=\"empty\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                            check_box_outline_blank\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"start\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"start\"\r\n                            id=\"start\"\r\n                            value=\"start\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                            double_arrow\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n\r\n                <div>\r\n                    <label htmlFor=\"end\">\r\n                        <input\r\n                            type=\"radio\"\r\n                            name=\"selector\"\r\n                            className=\"end\"\r\n                            id=\"end\"\r\n                            value=\"end\"\r\n                            onChange={handleChange}\r\n                        />\r\n                        <i className=\"large material-icons md-40 green-text text-accent-1\">\r\n                            sports_score\r\n                        </i>\r\n                    </label>\r\n                </div>\r\n            </form>\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Selector from \"./Selector\";\r\n\r\nimport \"../css/navbar.css\";\r\n\r\nexport default function NavBar({\r\n    randomize,\r\n    text,\r\n    setselectedBrush,\r\n    solve,\r\n    createGrid,\r\n    clear\r\n}) {\r\n    const solveDijkstra = () => {\r\n        solve(\"Dijkstra\");\r\n    };\r\n    const solveAStar = () => {\r\n        solve(\"AStar\");\r\n    };\r\n    const solveBFS = () => {\r\n        solve(\"BFS\");\r\n    };\r\n    const solveDFS = () => {\r\n        solve(\"DFS\");\r\n    };\r\n\r\n    const createMaze = () => {\r\n        createGrid(\"Maze\");\r\n    };\r\n\r\n    const createEmpty = () => {\r\n        createGrid(\"Empty\");\r\n    };\r\n\r\n    const createRandom = () => {\r\n        randomize(0.25, true);\r\n    };\r\n\r\n    let ErrorMsg = \"\";\r\n    if (text !== \"\") {\r\n        ErrorMsg = (\r\n            <li className=\"waves-effect waves-light red darken-3 \">\r\n                <a href=\"#!\">{text}</a>\r\n            </li>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar-fixed\">\r\n            <nav>\r\n                <div className=\"nav-wrapper grey darken-4\">\r\n                    <ul className=\"left hide-on-med-and-down\">\r\n                        <Selector setselectedBrush={setselectedBrush} />\r\n                    </ul>\r\n\r\n                    <ul className=\"right\">\r\n                        {ErrorMsg}\r\n\r\n                        <li\r\n                            className=\"dropdown-trigger  waves-effect waves-light  green darken-1\"\r\n                            data-target=\"dropdown1\"\r\n                        >\r\n                            <a href=\"#!\">\r\n                                <span className=\"hide-on-small-only left\">\r\n                                    Visualize Path\r\n                                </span>\r\n                                <i className=\"material-icons right hide-on-med-and-down\">\r\n                                    emoji_objects\r\n                                </i>\r\n                                <i className=\"material-icons hide-on-med-and-up\">\r\n                                    emoji_objects\r\n                                </i>\r\n                            </a>\r\n                        </li>\r\n\r\n                        <li\r\n                            className=\"waves-effect waves-light blue lighten-1\"\r\n                            onClick={clear}\r\n                        >\r\n                            <a href=\"#!\">\r\n                                <span className=\"hide-on-small-only left\">\r\n                                    Reset\r\n                                </span>\r\n                                <i className=\"material-icons right hide-on-med-and-down\">\r\n                                    loop\r\n                                </i>\r\n\r\n                                <i className=\"material-icons hide-on-med-and-up\">\r\n                                    loop\r\n                                </i>\r\n                            </a>\r\n                        </li>\r\n\r\n                        <li\r\n                            className=\"dropdown-trigger  waves-effect waves-light orange darken-4\"\r\n                            data-target=\"dropdown2\"\r\n                        >\r\n                            <a href=\"#!\">\r\n                                <span className=\"hide-on-small-only left\">\r\n                                    World Presets\r\n                                </span>\r\n                                <i className=\"material-icons right hide-on-med-and-down\">\r\n                                    public\r\n                                </i>\r\n\r\n                                <i className=\"material-icons hide-on-med-and-up\">\r\n                                    public\r\n                                </i>\r\n                            </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n\r\n            <ul id=\"dropdown1\" className=\"dropdown-content blue-grey darken-2 \">\r\n                <li>\r\n                    <a href=\"#!\" className=\"white-text\" onClick={solveAStar}>\r\n                        <i className=\"material-icons\">star</i>\r\n                        AStar\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#!\" className=\"white-text\" onClick={solveDijkstra}>\r\n                        <i className=\"material-icons\">pages</i>\r\n                        Dijkstra\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#!\" className=\"white-text\" onClick={solveBFS}>\r\n                        <i className=\"material-icons\">line_style</i>\r\n                        BFS\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#!\" className=\"white-text\" onClick={solveDFS}>\r\n                        <i className=\"material-icons\">filter_list</i>\r\n                        DFS\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n\r\n            <ul id=\"dropdown2\" className=\"dropdown-content blue-grey darken-2 \">\r\n                <li>\r\n                    <a href=\"#!\" className=\"white-text\" onClick={createMaze}>\r\n                        <i className=\"material-icons\">grid_on</i>\r\n                        Maze\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#!\" className=\"white-text\" onClick={createEmpty}>\r\n                        <i className=\"material-icons\">\r\n                            check_box_outline_blank\r\n                        </i>\r\n                        Empty\r\n                    </a>\r\n                </li>\r\n                <li>\r\n                    <a href=\"#!\" className=\"white-text\" onClick={createRandom}>\r\n                        <i className=\"material-icons\">shuffle_on</i>\r\n                        Random\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Block({ box, handleClick }) {\r\n    const handleOnMouseDown = (e) => {\r\n        handleClick(e.target, \"down\", box.index);\r\n    };\r\n\r\n    const handleOnMouseUp = (e) => {\r\n        handleClick(e.target, \"up\", box.index);\r\n    };\r\n\r\n    const handleOnMouseDrag = (e) => {\r\n        handleClick(e.target, \"drag\", box.index);\r\n    };\r\n\r\n    const style = `grid-item ${box.type} ${\r\n        box.type === \"empty\" ? box.overlay : \"\"\r\n    }`;\r\n\r\n    const id = `node-${box.index}`;\r\n\r\n    return (\r\n        <div\r\n            id={id}\r\n            className={style}\r\n            onMouseDown={handleOnMouseDown}\r\n            onMouseUp={handleOnMouseUp}\r\n            onMouseMove={handleOnMouseDrag}\r\n        />\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport Block from \"./Block\";\r\n\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport default function Field({ dims, boxes, handleClick }) {\r\n    const style = {\r\n        gridTemplateColumns: `${\"1fr \".repeat(dims[0])}`\r\n    };\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <div className=\"col l10 offset-l1 s12\">\r\n                <div className=\"grid-container\" style={style}>\r\n                    {boxes.map((box) => {\r\n                        return (\r\n                            <Block\r\n                                key={uuidv4()}\r\n                                box={box}\r\n                                handleClick={handleClick}\r\n                            />\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","export default class Dijkstra {\r\n    constructor(startNode, endNode, graph) {\r\n        this.startNode = startNode;\r\n        this.endNode = endNode;\r\n        this.Graph = graph;\r\n\r\n        this.CONNECTION_WEIGHT = 1;\r\n\r\n        this.nodes = [...this.Graph.nodes];\r\n\r\n        this.nodes.forEach((node) => {\r\n            node.dist = Infinity;\r\n        });\r\n\r\n        this.nodes[startNode.index].dist = 0;\r\n    }\r\n\r\n    solve() {\r\n        let remaining = [...this.Graph.nodes];\r\n        let visitedCount = 0;\r\n\r\n        while (remaining.length > 0) {\r\n            const minDist = Math.min.apply(Math, [\r\n                ...remaining.map((node) => node.dist)\r\n            ]);\r\n\r\n            if (minDist === Infinity) {\r\n                return null;\r\n            }\r\n            const bestCandidate = remaining.find(\r\n                (node) => node.dist === minDist\r\n            );\r\n\r\n            if (bestCandidate) {\r\n                if (bestCandidate === this.endNode) {\r\n                    return bestCandidate;\r\n                }\r\n\r\n                remaining = remaining.filter((node) => node !== bestCandidate);\r\n                bestCandidate.visitedCount = visitedCount;\r\n                visitedCount++;\r\n\r\n                this.Graph.findNeighbour(bestCandidate);\r\n\r\n                bestCandidate.neighbours.forEach((neighbour) => {\r\n                    const newDist = bestCandidate.dist + this.CONNECTION_WEIGHT;\r\n\r\n                    if (newDist < neighbour.dist) {\r\n                        neighbour.dist =\r\n                            bestCandidate.dist + this.CONNECTION_WEIGHT;\r\n                        neighbour.prev = bestCandidate;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n","export default class AStar {\r\n    constructor(startNode, endNode, graph) {\r\n        this.startNode = startNode;\r\n        this.endNode = endNode;\r\n        this.Graph = graph;\r\n\r\n        this.nodes = [...this.Graph.nodes];\r\n\r\n        this.nodes.forEach((node) => {\r\n            node.f = Infinity;\r\n            node.g = Infinity;\r\n        });\r\n\r\n        const Start = this.nodes[startNode.index];\r\n        Start.g = 0;\r\n        Start.f = this.hCost(Start);\r\n\r\n        this.open = [Start];\r\n        this.closed = [];\r\n    }\r\n\r\n    solve() {\r\n        let visitedCount = 0;\r\n        while (this.open.length > 0) {\r\n            const minDist = Math.min.apply(\r\n                Math,\r\n                this.open.map((node) => node.f)\r\n            );\r\n            const currentNode = this.open.find((node) => node.f === minDist);\r\n\r\n            if (currentNode === this.endNode) {\r\n                this.nodes = this.closed;\r\n                return currentNode;\r\n            }\r\n\r\n            currentNode.visitedCount = visitedCount;\r\n            visitedCount++;\r\n\r\n            this.open = this.open.filter((item) => item !== currentNode);\r\n            this.closed.push(currentNode);\r\n\r\n            this.Graph.findNeighbour(currentNode);\r\n\r\n            currentNode.neighbours.forEach((successor) => {\r\n                if (!this.closed.includes(successor)) {\r\n                    const new_g_val =\r\n                        currentNode.g + this.edgeCost(currentNode, successor);\r\n\r\n                    if (\r\n                        new_g_val < successor.g ||\r\n                        !this.open.includes(successor)\r\n                    ) {\r\n                        successor.g = new_g_val;\r\n                        successor.f = successor.g + this.hCost(successor);\r\n                        successor.prev = currentNode;\r\n\r\n                        if (!this.open.includes(successor)) {\r\n                            this.open.push(successor);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        this.nodes = this.closed;\r\n    }\r\n\r\n    heuristic([x1, y1], [x2, y2]) {\r\n        return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);\r\n    }\r\n\r\n    hCost(Node) {\r\n        return this.edgeCost(Node, this.endNode);\r\n    }\r\n\r\n    edgeCost(NodeA, NodeB) {\r\n        const lenX = this.Graph.dims[0];\r\n\r\n        const posA = this.indexToPos(NodeA.index, lenX);\r\n        const posB = this.indexToPos(NodeB.index, lenX);\r\n\r\n        return this.heuristic(posA, posB);\r\n    }\r\n\r\n    indexToPos(i, lenX) {\r\n        const x = i % lenX;\r\n        const y = Math.floor(i / lenX);\r\n        return [x, y];\r\n    }\r\n}\r\n","export default class BFS {\r\n    constructor(startNode, endNode, graph) {\r\n        this.startNode = startNode;\r\n        this.endNode = endNode;\r\n        this.Graph = graph;\r\n\r\n        this.nodes = [...this.Graph.nodes];\r\n\r\n        this.visitedCount = 1;\r\n    }\r\n\r\n    solve() {\r\n        const Start = this.nodes[this.startNode.index];\r\n        Start.visitedCount = 0;\r\n\r\n        let queue = [Start];\r\n\r\n        while (queue.length > 0) {\r\n            const node = queue.shift();\r\n\r\n            if (node === this.endNode) {\r\n                return node;\r\n            }\r\n\r\n            this.Graph.findNeighbour(node);\r\n\r\n            node.neighbours.forEach((child) => {\r\n                if (child.visitedCount === null) {\r\n                    child.prev = node;\r\n                    queue.push(child);\r\n                    child.visitedCount = this.visitedCount;\r\n                    this.visitedCount++;\r\n                }\r\n            });\r\n        }\r\n    }\r\n}\r\n","export default class BFS {\r\n    constructor(startNode, endNode, graph) {\r\n        this.startNode = startNode;\r\n        this.endNode = endNode;\r\n        this.Graph = graph;\r\n\r\n        this.nodes = [...this.Graph.nodes];\r\n\r\n        this.visitedCount = 0;\r\n    }\r\n\r\n    solve() {\r\n        return this.DFS(this.startNode, this.endNode);\r\n    }\r\n\r\n    DFS(node, goal) {\r\n        if (node.index === goal.index) {\r\n            return node;\r\n        }\r\n\r\n        node.visitedCount = this.visitedCount;\r\n        this.visitedCount++;\r\n\r\n        const stack = [];\r\n\r\n        this.Graph.findNeighbour(node);\r\n\r\n        node.neighbours.reverse().forEach((child) => {\r\n            if (child.visitedCount === null) {\r\n                child.prev = node;\r\n                stack.push(child);\r\n            }\r\n        });\r\n\r\n        while (stack.length > 0) {\r\n            const curr = stack.pop();\r\n\r\n            const res = this.DFS(curr, goal);\r\n\r\n            if (res) {\r\n                return res;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Selector({ setselectedBrush }) {\r\n    function handleChange(e) {\r\n        setselectedBrush(e.target.className);\r\n    }\r\n\r\n    return (\r\n        <form className=\"drawSelector centered container hide-on-large-only\">\r\n            <div>\r\n                <label htmlFor=\"wallS\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"selector\"\r\n                        className=\"wall\"\r\n                        id=\"wallS\"\r\n                        value=\"wall\"\r\n                        onChange={handleChange}\r\n                    />\r\n                    <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                        dashboard\r\n                    </i>\r\n                </label>\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"emptyS\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"selector\"\r\n                        className=\"empty\"\r\n                        id=\"emptyS\"\r\n                        value=\"empty\"\r\n                        onChange={handleChange}\r\n                    />\r\n                    <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                        check_box_outline_blank\r\n                    </i>\r\n                </label>\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"startS\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"selector\"\r\n                        className=\"start\"\r\n                        id=\"startS\"\r\n                        value=\"start\"\r\n                        onChange={handleChange}\r\n                    />\r\n                    <i className=\"large material-icons md-40  green-text text-accent-1\">\r\n                        double_arrow\r\n                    </i>\r\n                </label>\r\n            </div>\r\n\r\n            <div>\r\n                <label htmlFor=\"endS\">\r\n                    <input\r\n                        type=\"radio\"\r\n                        name=\"selector\"\r\n                        className=\"end\"\r\n                        id=\"endS\"\r\n                        value=\"end\"\r\n                        onChange={handleChange}\r\n                    />\r\n                    <i className=\"large material-icons md-40 green-text text-accent-1\">\r\n                        sports_score\r\n                    </i>\r\n                </label>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n","import { Graph } from \"./Solver/Graph\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport NavBar from \"./NavBar/NavBar\";\r\nimport Field from \"./Game/Field\";\r\n\r\nimport Dijkstra from \"./Solver/Dijkstra\";\r\nimport AStar from \"./Solver/AStar\";\r\nimport BFS from \"./Solver/BFS\";\r\nimport DFS from \"./Solver/DFS\";\r\nimport SelectorSmall from \"./NavBar/SelectorSmall\";\r\n\r\nclass BlockClass {\r\n    constructor(index) {\r\n        this.index = index;\r\n        this.type = \"empty\";\r\n        this.overlay = \"\";\r\n    }\r\n}\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        width,\r\n        height\r\n    };\r\n}\r\n\r\nexport class PathVisualizer extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.mousePressed = false;\r\n        this.animating = false;\r\n        this.calculating = false;\r\n\r\n        this.text = \"\";\r\n\r\n        this.startIndex = null;\r\n        this.endIndex = null;\r\n\r\n        this.dims = [50, 25];\r\n\r\n        this.boxes = [];\r\n        this.selectedBrush = \"\";\r\n\r\n        this.setboxes = (a) => {\r\n            this.boxes = a;\r\n        };\r\n\r\n        this.setselectedBrush = (a) => {\r\n            this.selectedBrush = a;\r\n        };\r\n\r\n        this.setGridDims();\r\n\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.clear = this.clear.bind(this);\r\n        this.randomize = this.randomize.bind(this);\r\n        this.solve = this.solve.bind(this);\r\n        this.animate = this.animate.bind(this);\r\n        this.animateWalls = this.animateWalls.bind(this);\r\n        this.setGridDims = this.setGridDims.bind(this);\r\n        this.createGrid = this.createGrid.bind(this);\r\n\r\n        this.randomize(0.25, true);\r\n    }\r\n\r\n    //Draw\r\n    handleClick(element, state, index) {\r\n        if (state === \"down\") {\r\n            this.mousePressed = true;\r\n            this.clone = [...this.boxes];\r\n            if (this.selectedBrush) this.setCSS(element, this.selectedBrush);\r\n\r\n            if (this.selectedBrush === \"start\") {\r\n                if (this.startIndex !== index) {\r\n                    this.setCSS(\r\n                        document.getElementById(`node-${this.startIndex}`),\r\n                        \"empty\"\r\n                    );\r\n                    this.startIndex = index;\r\n                }\r\n            }\r\n\r\n            if (this.selectedBrush === \"end\") {\r\n                if (this.endIndex !== index) {\r\n                    this.setCSS(\r\n                        document.getElementById(`node-${this.endIndex}`),\r\n                        \"empty\"\r\n                    );\r\n                    this.endIndex = index;\r\n                }\r\n            }\r\n        } else if (state === \"up\") {\r\n            this.mousePressed = false;\r\n\r\n            if (!this.clone) return;\r\n\r\n            try {\r\n                if (this.selectedBrush === \"start\")\r\n                    this.clone.find((box) => box.type === \"start\").type =\r\n                        \"empty\";\r\n\r\n                if (this.selectedBrush === \"end\")\r\n                    this.clone.find((box) => box.type === \"end\").type = \"empty\";\r\n            } catch {}\r\n\r\n            if (this.selectedBrush) this.clone[index].type = this.selectedBrush;\r\n\r\n            this.setboxes(this.clone);\r\n        } else if (state === \"drag\") {\r\n            if (this.selectedBrush && this.mousePressed) {\r\n                if (\r\n                    this.selectedBrush === \"wall\" ||\r\n                    this.selectedBrush === \"empty\"\r\n                ) {\r\n                    this.clone[index].type = this.selectedBrush;\r\n                    this.setCSS(element, this.selectedBrush);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    //Preset Css\r\n    setCSS(element, value) {\r\n        const currentState = element.classList[element.classList.length - 1];\r\n        element.classList.remove(currentState);\r\n        element.classList.add(value);\r\n    }\r\n\r\n    clear() {\r\n        if (this.animating) {\r\n            clearInterval(this.pathInterval);\r\n\r\n            clearInterval(this.visitedInterval);\r\n\r\n            clearInterval(this.wallInterval);\r\n\r\n            this.animating = false;\r\n        }\r\n        const copy = [...this.boxes];\r\n\r\n        copy.forEach((box) => {\r\n            box.overlay = \"\";\r\n        });\r\n        this.setboxes(copy);\r\n        this.text = \"\";\r\n        this.setState({ state: this.state });\r\n    }\r\n\r\n    //Randomize\r\n    randomize(wallProbability, setStartEnd) {\r\n        if (this.animating === false) {\r\n            const emptyBoxes = Array.from(\r\n                { length: this.dims[0] * this.dims[1] },\r\n                (_, i) => {\r\n                    return new BlockClass(i);\r\n                }\r\n            );\r\n\r\n            for (\r\n                let i = 0;\r\n                i < Math.floor(emptyBoxes.length * wallProbability);\r\n                i++\r\n            ) {\r\n                emptyBoxes[getRandomInt(0, emptyBoxes.length)].type = \"wall\";\r\n            }\r\n\r\n            if (setStartEnd) {\r\n                this.startIndex =\r\n                    getRandomInt(1, 4) * this.dims[0] +\r\n                    getRandomInt(0, Math.ceil(this.dims[0] / 2));\r\n\r\n                this.endIndex =\r\n                    emptyBoxes.length -\r\n                    getRandomInt(1, 4) * this.dims[0] -\r\n                    getRandomInt(0, Math.ceil(this.dims[0] / 2));\r\n\r\n                emptyBoxes[this.startIndex].type = \"start\";\r\n                emptyBoxes[this.endIndex].type = \"end\";\r\n            }\r\n\r\n            this.setboxes(emptyBoxes);\r\n            this.setState({ state: this.state });\r\n        }\r\n    }\r\n\r\n    //Solve for Path\r\n    solve(algorithm) {\r\n        if (this.animating === true) {\r\n            this.clear();\r\n        }\r\n\r\n        if (this.calculating === false) {\r\n            this.calculating = true;\r\n\r\n            var tStart = performance.now();\r\n\r\n            const graph = new Graph(this.boxes, this.dims);\r\n\r\n            const startNode = graph.findStartNode();\r\n            const endNode = graph.findEndNode();\r\n\r\n            if (!endNode || !startNode) {\r\n                this.text = !endNode ? \"No End Node!\" : \"No Start Node!\";\r\n                this.calculating = false;\r\n                this.setState({ state: this.state });\r\n                return;\r\n            }\r\n\r\n            let Solver = null;\r\n\r\n            switch (algorithm) {\r\n                case \"AStar\":\r\n                    Solver = new AStar(startNode, endNode, graph);\r\n                    break;\r\n                case \"Dijkstra\":\r\n                    Solver = new Dijkstra(startNode, endNode, graph);\r\n                    break;\r\n                case \"BFS\":\r\n                    Solver = new BFS(startNode, endNode, graph);\r\n                    break;\r\n                case \"DFS\":\r\n                    Solver = new DFS(startNode, endNode, graph);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            const target = Solver.solve();\r\n\r\n            const path = graph.traceBack(target);\r\n            const visited = graph.getVisited(Solver.nodes);\r\n\r\n            var tEnd = performance.now();\r\n\r\n            this.calculating = false;\r\n\r\n            const timeTaken = tEnd - tStart;\r\n\r\n            this.text = (\r\n                <>\r\n                    <span className=\"left\">\r\n                        {Math.round(timeTaken * 100) / 100} ms\r\n                    </span>\r\n\r\n                    <i className=\"material-icons right hide-on-med-and-down\">\r\n                        timer\r\n                    </i>\r\n                </>\r\n            );\r\n            this.setState({ state: this.state });\r\n\r\n            this.animating = true;\r\n            this.animate(visited, path);\r\n        }\r\n    }\r\n\r\n    animate(visited, path) {\r\n        if (visited.length !== 0) {\r\n            this.visitedInterval = setInterval(\r\n                animate.bind(this),\r\n                15 + 300 / this.dims[0]\r\n            );\r\n\r\n            var iterations = 0;\r\n            function animate() {\r\n                const el = document.getElementById(\r\n                    `node-${visited[iterations]}`\r\n                );\r\n                this.setCSS(el, \"visited\");\r\n\r\n                if (iterations === visited.length - 1) {\r\n                    this.animatePath(path);\r\n                }\r\n\r\n                if (iterations === visited.length - 1)\r\n                    clearInterval(this.visitedInterval);\r\n\r\n                iterations++;\r\n            }\r\n        }\r\n    }\r\n\r\n    animatePath(path) {\r\n        if (path.length !== 0) {\r\n            this.pathInterval = setInterval(\r\n                animate.bind(this),\r\n                80 + 300 / this.dims[0]\r\n            );\r\n\r\n            var iterations = 1;\r\n            function animate() {\r\n                const el = document.getElementById(`node-${path[iterations]}`);\r\n                this.setCSS(el, \"path\");\r\n\r\n                if (iterations === path.length - 2) {\r\n                    this.animating = false;\r\n                }\r\n\r\n                if (iterations === path.length - 2)\r\n                    clearInterval(this.pathInterval);\r\n\r\n                iterations++;\r\n            }\r\n        } else {\r\n            this.animating = false;\r\n            this.text = \"\";\r\n        }\r\n    }\r\n\r\n    animateWalls(walls, emptyBoxes) {\r\n        if (walls.length !== 0) {\r\n            this.wallInterval = setInterval(\r\n                animate.bind(this),\r\n                15 + 200 / this.dims[0]\r\n            );\r\n\r\n            var iterations = 0;\r\n            function animate() {\r\n                const el = document.getElementById(`node-${walls[iterations]}`);\r\n                this.setCSS(el, \"wall\");\r\n\r\n                if (iterations === walls.length - 1) {\r\n                    clearInterval(this.wallInterval);\r\n                    this.startIndex = this.vectorToIndex(1, 1);\r\n                    this.endIndex = this.vectorToIndex(\r\n                        this.dims[0] - 2,\r\n                        this.dims[1] - 2\r\n                    );\r\n                    emptyBoxes[this.startIndex].type = \"start\";\r\n                    emptyBoxes[this.endIndex].type = \"end\";\r\n\r\n                    this.setboxes(emptyBoxes);\r\n                    this.animating = false;\r\n                    this.setState({ state: this.state });\r\n                }\r\n                iterations++;\r\n            }\r\n        } else {\r\n            this.animating = false;\r\n        }\r\n    }\r\n\r\n    setGridDims() {\r\n        const dimensions = getWindowDimensions();\r\n\r\n        const ratio = dimensions.width / dimensions.height;\r\n\r\n        this.dims = [\r\n            Math.round(dimensions.width / 40),\r\n            Math.round(dimensions.width / 42 / ratio)\r\n        ];\r\n\r\n        if (this.dims[0] % 2 === 0) {\r\n            this.dims[0]++;\r\n        }\r\n\r\n        if (this.dims[1] % 2 === 0) {\r\n            this.dims[1]++;\r\n        }\r\n    }\r\n\r\n    indexToVector(index) {\r\n        const x = index % this.dims[0];\r\n        const y = index / this.dims[0];\r\n        return [x, y];\r\n    }\r\n\r\n    vectorToIndex(x, y) {\r\n        const index = y * this.dims[0] + x;\r\n        return index;\r\n    }\r\n\r\n    addOuterWalls(emptyBoxes, dims, walls) {\r\n        for (var i = 0; i < dims[0]; i++) {\r\n            if (i === 0 || i === dims[0] - 1) {\r\n                for (var j = 0; j < dims[1]; j++) {\r\n                    emptyBoxes[this.vectorToIndex(i, j)].type = \"wall\";\r\n                    walls.push(this.vectorToIndex(i, j));\r\n                }\r\n            } else {\r\n                emptyBoxes[this.vectorToIndex(i, 0)].type = \"wall\";\r\n                emptyBoxes[this.vectorToIndex(i, dims[1] - 1)].type = \"wall\";\r\n                walls.push(this.vectorToIndex(i, 0));\r\n                walls.push(this.vectorToIndex(i, dims[1] - 1));\r\n            }\r\n        }\r\n    }\r\n\r\n    addInnerWalls(emptyBoxes, h, minX, maxX, minY, maxY, walls) {\r\n        if (h) {\r\n            if (maxX - minX < 2) {\r\n                return;\r\n            }\r\n\r\n            var y = Math.floor(randomNumber(minY, maxY) / 2) * 2;\r\n            this.addHWall(emptyBoxes, minX, maxX, y, walls);\r\n\r\n            this.addInnerWalls(emptyBoxes, !h, minX, maxX, minY, y - 1, walls);\r\n            this.addInnerWalls(emptyBoxes, !h, minX, maxX, y + 1, maxY, walls);\r\n        } else {\r\n            if (maxY - minY < 2) {\r\n                return;\r\n            }\r\n\r\n            var x = Math.floor(randomNumber(minX, maxX) / 2) * 2;\r\n            this.addVWall(emptyBoxes, minY, maxY, x, walls);\r\n\r\n            this.addInnerWalls(emptyBoxes, !h, minX, x - 1, minY, maxY, walls);\r\n            this.addInnerWalls(emptyBoxes, !h, x + 1, maxX, minY, maxY, walls);\r\n        }\r\n    }\r\n\r\n    addHWall(emptyBoxes, minX, maxX, y, walls) {\r\n        var hole = Math.floor(randomNumber(minX, maxX) / 2) * 2 + 1;\r\n\r\n        for (var i = minX; i <= maxX; i++) {\r\n            const index = this.vectorToIndex(i, y);\r\n            if (i !== hole) {\r\n                emptyBoxes[index].type = \"wall\";\r\n                walls.push(index);\r\n            } else {\r\n                emptyBoxes[index].type = \"empty\";\r\n            }\r\n        }\r\n    }\r\n\r\n    addVWall(emptyBoxes, minY, maxY, x, walls) {\r\n        var hole = Math.floor(randomNumber(minY, maxY) / 2) * 2 + 1;\r\n\r\n        for (var i = minY; i <= maxY; i++) {\r\n            const index = this.vectorToIndex(x, i);\r\n            if (i !== hole) {\r\n                emptyBoxes[index].type = \"wall\";\r\n                walls.push(index);\r\n            } else {\r\n                emptyBoxes[this.vectorToIndex(x, i)].type = \"empty\";\r\n            }\r\n        }\r\n    }\r\n\r\n    createMaze() {\r\n        const emptyBoxes = Array.from(\r\n            { length: this.dims[0] * this.dims[1] },\r\n            (_, i) => {\r\n                return new BlockClass(i);\r\n            }\r\n        );\r\n\r\n        let walls = [];\r\n\r\n        this.addOuterWalls(emptyBoxes, this.dims, walls);\r\n\r\n        this.addInnerWalls(\r\n            emptyBoxes,\r\n            false,\r\n            1,\r\n            this.dims[0] - 2,\r\n            1,\r\n            this.dims[1] - 2,\r\n            walls\r\n        );\r\n\r\n        emptyBoxes.forEach((box) => {\r\n            if (box.type === \"empty\") {\r\n                walls = walls.filter((index) => index !== box.index);\r\n            }\r\n        });\r\n\r\n        this.animating = true;\r\n        this.animateWalls(walls, emptyBoxes);\r\n    }\r\n\r\n    createGrid(type) {\r\n        if (this.animating === false) {\r\n            switch (type) {\r\n                case \"Empty\":\r\n                    this.randomize(0, true);\r\n                    break;\r\n\r\n                case \"Maze\":\r\n                    this.randomize(0, false);\r\n                    this.createMaze();\r\n                    break;\r\n\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <NavBar\r\n                    solve={this.solve}\r\n                    createGrid={this.createGrid}\r\n                    randomize={this.randomize}\r\n                    text={this.text}\r\n                    setselectedBrush={this.setselectedBrush}\r\n                    clear={this.clear}\r\n                />\r\n\r\n                <Field\r\n                    dims={this.dims}\r\n                    boxes={this.boxes}\r\n                    handleClick={this.handleClick}\r\n                />\r\n\r\n                <SelectorSmall setselectedBrush={this.setselectedBrush} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nfunction randomNumber(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","import { PathVisualizer } from \"./PathVisualizer\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <PathVisualizer />\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}